name: Build and Publish

on:
  push:
    branches:
      - "main"
  pull_request:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
# See: https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs
permissions:
  contents: write
  id-token: write
  discussions: write
  pages: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3.5.2
        with:
          fetch-depth: 0
      - name: Install Nix
        uses: cachix/install-nix-action@v22
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Fetch Nix Derivation
        uses: cachix/cachix-action@v12
        with:
          name: nicholaschiasson-github-io
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
      - name: Check Format
        run: nix develop -c just check
      # - name: Lint
      #   run: nix develop -c just lint
      - name: Build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: nix develop -c just build
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v3.1.2
        with:
          path: "dist"

  tag:
    if: github.event_name == 'push' || (github.base_ref == 'main' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    needs: [build]
    outputs:
      version: ${{ steps.stamp.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3.5.2
      - name: Check semver bump
        id: check-semver
        run: |
          if [[ "${{ github.event.head_commit.message }}" =~ ^Merge\ pull\ request\ #[0-9]+\ from\ [^/]+/patch/.+$ ]]
          then
            echo "semver=patch" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.head_commit.message }}" =~ ^Merge\ pull\ request\ #[0-9]+\ from\ [^/]+/major/.+$ ]]
          then
            echo "semver=major" >> $GITHUB_OUTPUT
          else
            echo "semver=minor" >> $GITHUB_OUTPUT
          fi
      - name: Bump major version and push tag
        id: bump-major
        if: ${{ steps.check-semver.outputs.semver == 'major' }}
        uses: anothrNick/github-tag-action@1.65.0
        env:
          DEFAULT_BUMP: major
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Bump minor version and push tag
        id: bump-minor
        if: ${{ steps.check-semver.outputs.semver == 'minor' }}
        uses: anothrNick/github-tag-action@1.65.0
        env:
          DEFAULT_BUMP: minor
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Bump patch version and push tag
        id: bump-patch
        if: ${{ steps.check-semver.outputs.semver == 'patch' }}
        uses: anothrNick/github-tag-action@1.65.0
        env:
          DEFAULT_BUMP: patch
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Stamp version
        id: stamp
        run: |
          if [[ "${{ steps.check-semver.outputs.semver }}" == patch ]]
          then
            VERSION=${{ steps.bump-patch.outputs.new_tag }}
          elif [[ "${{ steps.check-semver.outputs.semver }}" == major ]]
          then
            VERSION=${{ steps.bump-major.outputs.new_tag }}
          else
            VERSION=${{ steps.bump-minor.outputs.new_tag }}
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

  release:
    if: github.event_name == 'push' || (github.base_ref == 'main' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    needs: [build, tag]
    steps:
      - name: Download Build Artifacts
        uses: actions/download-artifact@v3.0.2
      - name: Release
        uses: softprops/action-gh-release@v0.1.15
        with:
          tag_name: ${{ needs.tag.outputs.version }}

  deploy:
    if: github.event_name == 'push' || (github.base_ref == 'main' && github.event.pull_request.merged == true)
    # Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
    # However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
    concurrency:
      group: "pages"
      cancel-in-progress: false
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: [build, release]
    steps:
      - name: Checkout
        uses: actions/checkout@v3.5.2
      - name: Download Build Artifacts
        uses: actions/download-artifact@v3.0.2
      - name: Setup Pages
        uses: actions/configure-pages@v3
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: "artifact"
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

  deploy_test:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout
        uses: actions/checkout@v3.5.2
        with:
          path: pages
          ref: pages
      - name: Download Build Artifacts
        uses: actions/download-artifact@v3.0.2
      - name: Prepare Pages
        run: |
          rm -rf pages/*
          mv artifact/* pages
      - name: Deploy to GitHub Pages
        working-directory: pages
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          git commit -m "Deploying to GitHub Pages"
          git push
